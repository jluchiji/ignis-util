{"version":3,"sources":["expressify.js"],"names":[],"mappings":";;;;;;;;;;;;qBAmBwB,UAAU;;;;;wBAZV,UAAU;;;;;;;;;;;;;;;AAYnB,SAAS,UAAU,CAAC,EAAE,EAAE,KAAK,EAAgB;MAAd,MAAM,yDAAG,GAAG;;;AAGxD,SAAO,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE;AAC9B,WAAO,4BACD,CAAC,YAAS;AAAE,aAAO,EAAE,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;KAAE,CAAC,CACxC,IAAI,CAAC,UAAA,IAAI,EAAI;AAAE,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,AAAC,IAAI,EAAE,CAAC;KAAE,CAAC,SACnD,CAAC,IAAI,CAAC,CAAC;GAChB,CAAC;CAEH","file":"expressify.js","sourcesContent":["/**\n * util/expressify.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport Bluebird    from 'bluebird';\n\n/**\n * expressify(2)\n *\n * @description                Wraps a promise-producing function into an\n *                             express middleware that responds with the promise\n *                             results if resolved; invokes error handler stack\n *                             if rejected.\n * @param          {fn}        Promise-producing handler function.\n * @param          {status}    Status code to return on success (default: 200).\n */\nexport default function expressify(fn, ignis, status = 200) {\n\n  /* Otherwise, unpromisify */\n  return function(req, res, next) {\n    return Bluebird\n      .try(()    => { return fn(ignis, req); })\n      .then(data => { res.status(status).send(data); next(); })\n      .catch(next);\n  };\n\n}\n"],"sourceRoot":"/source/"}