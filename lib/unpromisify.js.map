{"version":3,"sources":["unpromisify.js"],"names":[],"mappings":";;;;;;;;;;;;qBAmBwB,WAAW;;;;;;;;;sBAZX,QAAQ;;;;wBACR,UAAU;;;;;;;;;;;;;;AAWnB,SAAS,WAAW,CAAC,EAAE,EAAE;AACtC,SAAO,YAAkB;sCAAN,IAAI;AAAJ,UAAI;;;AACrB,QAAI,QAAQ,GAAG,oBAAW,EAAG,CAAC;;;AAG9B,QAAI,OAAO,oBAAE,IAAI,CAAC,IAAI,CAAC,KAAK,UAAU,EAAE;AACtC,cAAQ,GAAG,oBAAE,IAAI,CAAC,IAAI,CAAC,CAAC;AACxB,UAAI,GAAO,oBAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAC1C;;;AAGD,WAAO,4BACD,CAAC,YAAM;AAAE,aAAO,EAAE,qCAAI,IAAI,EAAC,CAAC;KAAE,CAAC,CAClC,OAAO,CAAC,QAAQ,CAAC,CAAC;GACtB,CAAC;CACH","file":"unpromisify.js","sourcesContent":["/**\n * util/unpromisify.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\nimport Bluebird    from 'bluebird';\n\n/**\n * unpromisify(1)\n *\n * @description                Wraps a promise-returning function into a\n *                             universal function that returns a promise AND\n *                             accepts a node-style callback.\n * @param          {fn}        promise-returning function to wrap.\n * @returns        {Function}  Node-style callback-accepting function.\n */\nexport default function unpromisify(fn) {\n  return function(...args) {\n    let callback = function() { };\n\n    /* If last argument is a callback, separate it out */\n    if (typeof _.last(args) === 'function') {\n      callback = _.last(args);\n      args     = _.take(args, args.length - 1);\n    }\n\n    /* Call the function and wrap the promise */\n    return Bluebird\n      .try(() => { return fn(...args); })\n      .nodeify(callback);\n  };\n}\n"],"sourceRoot":"/source/"}