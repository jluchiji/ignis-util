{"version":3,"sources":["error-is.js"],"names":[],"mappings":";;;;;;;;;;;;qBA0BwB,OAAO;;;;;sBAnBP,QAAQ;;;;;;;;;;;;;;;;;;;;;;AAmBjB,SAAS,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE;;;AAG/C,MAAI,EAAE,KAAK,YAAY,KAAK,CAAA,AAAC,EAAE;AAAE,WAAO,KAAK,CAAC;GAAE;;;AAGhD,MAAI,CAAC,QAAQ,EAAE;AAAE,WAAO,IAAI,CAAC;GAAE;;;AAG/B,MAAI,OAAO,QAAQ,KAAK,UAAU,EAAE;AAClC,WAAQ,KAAK,YAAY,QAAQ,CAAE;GACpC;;AAED,MAAM,IAAI,GACR,KAAK,CAAC,IAAI,IACT,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,AAAC,IAC7C,EAAE,CAAC;;;AAGL,MAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAChC,WAAQ,IAAI,CAAC,WAAW,EAAE,KAAK,QAAQ,CAAC,WAAW,EAAE,CAAE;GACxD;;;AAGD,MAAI,QAAQ,YAAY,MAAM,EAAE;AAC9B,WAAO,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GAC5B;;;AAGD,MAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;AAChC,WAAO,oBAAE,KAAK,CACZ,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EACrB,UAAC,GAAG;aAAK,oBAAE,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;KAAA,CACtD,CAAC;GACH;;;AAGD,QAAM,IAAI,KAAK,gCAA8B,QAAQ,CAAG,CAAC;CAE1D","file":"error-is.js","sourcesContent":["/**\n * util/error-is.js\n *\n * @author  Denis Luchkin-Zhou <denis@ricepo.com>\n * @license MIT\n */\n\nimport _           from 'lodash';\n\n/**\n * errorIs(2)\n *\n * @description                Checks whether the error is of the specified\n *                             criteria:\n *                               1) falsy: returns true;\n *                               2) function: checks whether error is instance\n *                                  of the given constructor;\n *                               3) string: checks if error name is equal the\n *                               \t\tstring, case insesitive;\n *                               4) regex: checks if error name matches the\n *                               \t\tregex;\n *                               5) otherwise: throw.\n * @param          {error}     The error instance to check.\n * @param          {criteria}  The type to check against, see description.\n * @return         {boolean}   True if error matches, false otherwise.\n */\nexport default function errorIs(error, criteria) {\n\n  /* This function only deals with errors! */\n  if (!(error instanceof Error)) { return false; }\n\n  /* Falsy criteria matches everything (catch-all) */\n  if (!criteria) { return true; }\n\n  /* If criteria is a constructor... */\n  if (typeof criteria === 'function') {\n    return (error instanceof criteria);\n  }\n\n  const name =\n    error.name ||\n    (error.constructor && error.constructor.name) ||\n    '';\n\n  /* If criteria is a string... */\n  if (typeof criteria === 'string') {\n    return (name.toLowerCase() === criteria.toLowerCase());\n  }\n\n  /* If criteria is a regex... */\n  if (criteria instanceof RegExp) {\n    return criteria.test(name);\n  }\n\n  /* Object: do a deep match */\n  if (typeof criteria === 'object') {\n    return _.every(\n      Object.keys(criteria),\n      (key) => _.matchesProperty(key, criteria[key])(error)\n    );\n  }\n\n  /* Have no idea what the criteria is... */\n  throw new Error(`Unexpected criteria type: ${criteria}`);\n\n}\n"],"sourceRoot":"/source/"}